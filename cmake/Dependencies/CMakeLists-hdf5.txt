# -*- Mode: cmake -*-
project(dependencies-hdf5)

include(ExternalProject)


# Create targets for downloading, configuring, building and installing hdf5
# Fortran support does not work yet...
if(IS_ABSOLUTE ${CMAKE_TOOLCHAIN_FILE})
  set(toolchain_file ${CMAKE_TOOLCHAIN_FILE})
else()
  set(toolchain_file ${soft5_BINARY_DIR}/${CMAKE_TOOLCHAIN_FILE})
endif()

if(CROSS_TARGET STREQUAL "win64")
  set(initial_cache_opt "-C${soft5_SOURCE_DIR}/cmake/Dependencies/TryRunResults-win64-hdf5.cmake")
else()
  set(initial_cache_opt "")
endif()

ExternalProject_Add(
  hdf5
  PREFIX         "${SOFT_DEPS_ROOT_DIR}"
  STAMP_DIR      "${SOFT_DEPS_SOURCE_DIR}/hdf5-stamp"

  DOWNLOAD_DIR   "${SOFT_DEPS_SOURCE_DIR}/tarbals"
  URL            "https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.10/hdf5-1.10.0-patch1/src/hdf5-1.10.0-patch1.tar.gz"
  URL_MD5        "9180ff0ef8dc2ef3f61bd37a7404f295"

  UPDATE_COMMAND ""
  PATCH_COMMAND  ""

  SOURCE_DIR     "${SOFT_DEPS_SOURCE_DIR}/hdf5-src"
  CMAKE_ARGS
    ${initial_cache_opt}
    -DCMAKE_TOOLCHAIN_FILE=${toolchain_file}
    -DHDF5_BUILD_FORTRAN=OFF
    -DCMAKE_BUILD_TYPE=Release
    -DCMAKE_INSTALL_PREFIX=${SOFT_DEPS_INSTALL_PREFIX}
  BINARY_DIR     "${SOFT_DEPS_SOURCE_DIR}/hdf5-build"
  )
#    --debug-trycompile


# Make sure that hdf5 is installed before compiling tests
# Hmm, seems not really work when compiling with -j
ExternalProject_Add_StepTargets(hdf5 hdf5-install
  DEPENDEES install)

add_custom_target(hdf5-dummy
  DEPENDS hdf5-install)

add_dependencies(${SOFT_DEPS_INSTALL_PREFIX}/lib/liblibhdf5.a hdf5-dummy)

# Calling find_package(Hdf5) here would fail, since hdf5 is first
# build at compile time.
#
# We therefore manually set the variables that find_package(Hdf5)
# would have set.
#
# We assume that we are cross-compiling with mingw64 for win64 on linux,
# which produces static libraries.
set(HDF5_FOUND TRUE
  CACHE PATH "" FORCE)
set(HDF5_INCLUDE_DIRS "${SOFT_DEPS_INSTALL_PREFIX}/include"
  CACHE PATH "" FORCE)
set(HDF5_INCLUDE_DIR "${SOFT_DEPS_INSTALL_PREFIX}/include"
  CACHE PATH "" FORCE)

set(HDF5_C_LIBRARIES "${SOFT_DEPS_INSTALL_PREFIX}/lib/liblibhdf5.a"
  CACHE FILEPATH "" FORCE)
set(HDF5_CXX_LIBRARIES "${SOFT_DEPS_INSTALL_PREFIX}/lib/liblibhdf5_cpp.a"
  CACHE FILEPATH "" FORCE)
set(HDF5_Fortran_LIBRARIES "${SOFT_DEPS_INSTALL_PREFIX}/lib/liblibhdf5_fortran.a"
  CACHE FILEPATH "" FORCE)

set(HDF5_C_HL_LIBRARIES "${SOFT_DEPS_INSTALL_PREFIX}/lib/liblibhdf5_hl.a"
  CACHE FILEPATH "" FORCE)
set(HDF5_CXX_HL_LIBRARIES "${SOFT_DEPS_INSTALL_PREFIX}/lib/liblibhdf5_hl_cpp.a"
  CACHE FILEPATH "" FORCE)
set(HDF5_Fortran_HL_LIBRARIES "${SOFT_DEPS_INSTALL_PREFIX}/lib/liblibhdf5_hl_fortran.a"
  CACHE FILEPATH "" FORCE)

set(HDF5_LIBRARIES "${HDF5_C_LIBRARIES}" CACHE FILEPATH "" FORCE)
set(HDF5_HL_LIBRARIES "${HDF5_C_HL_LIBRARIES}" CACHE FILEPATH "" FORCE)

mark_as_advanced(
  HDF5_FOUND
  HDF5_INCLUDE_DIRS
  HDF5_INCLUDE_DIR

  HDF5_C_LIBRARIES
  HDF5_CXX_LIBRARIES
  HDF5_Fortran_LIBRARIES

  HDF5_C_HL_LIBRARIES
  HDF5_CXX_HL_LIBRARIES
  HDF5_Fortran_HL_LIBRARIES

  HDF5_LIBRARIES
  HDF5_HL_LIBRARIES
  )


ExternalProject_Get_Property(hdf5 install_dir)
include_directories(${install_dir}/include)

add_dependencies(project_b_exe project_a)
target_link_libraries(project_b_exe ${install_dir}/lib/alib.lib)
