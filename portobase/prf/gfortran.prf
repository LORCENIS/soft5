isEmpty( fortran_compiler ) {
  # gfortran.prf
  # Adds gfortran as extra compiler to the qmake build system.
  #
  # This file must reside in the path of QMAKEFEATURES
  #
  # Thomas Hagelien
  #
 
  fortran_compiler = gfortran    
     	    
  # Define debug and relase flags
  debug:FFLAGS   = -O0 -g -Wall -Wextra
  release:FFLAGS = -cpp -fcray-pointer -g -O2 -fno-range-check

  !isEmpty( MODULE_DIR ) {
    FFLAGS += -J $${MODULE_DIR}/
  }

  # Set up the compiler directives
  debug:objdir = debug$${DIR_SEPARATOR}
  release:objdir = release$${DIR_SEPARATOR}
  f90.output = $$objdir$${DIR_SEPARATOR}${QMAKE_FILE_BASE}.o
  f90.input  = F90SOURCES
  	     

  # If MODULE_DIR is specified, create if neccessary and and to INCLUDEPATH
  !isEmpty( MODULE_DIR ) {
    f90.commands = @$(CHK_DIR_EXISTS) $${MODULE_DIR} || $(MKDIR) $${MODULE_DIR} $$escape_expand(\\n\\t)
    INCLUDEPATH += $${MODULE_DIR}
  }

  LIBS += -lgfortran
  # Set up build command
  f90.commands += $$fortran_compiler
  f90.commands += $(INCPATH)
  f90.commands += -fworking-directory $(OBJECTS_DIR)
  f90.commands += -c $$FFLAGS ${QMAKE_FILE_IN}
  f90.commands += -o ${QMAKE_FILE_OUT}
  f90.clean    += $${MODULE_DIR}/*.mod object_script.* $(OBJECTS_DIR)/*.o

  f90.CONFIG += target_predeps
  f90.dependency_type = TYPE_C
  QMAKE_EXTRA_COMPILERS += f90

} else {
  !build_pass:error(Fortran compiler ($$fortran_compiler) already defined. Please check your CONFIG settings)
}
