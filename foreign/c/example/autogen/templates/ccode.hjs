@{
    var capi = require('soft.forge.capi');

    ENTITY = soft.model.name.toUpperCase();
    entity = soft.model.name.toLowerCase();
    dims = [];
    
    createArgs = [];
    if (soft.model.dimensions != undefined) {
	soft.model.dimensions.forEach(function (d){
	    dims.push(d.name);
	    createArgs.push("size_t " + d.name);
	});
    }

    attributes = (function(){
	var attr = [];
	soft.model.properties.forEach(function (entry){
	    var o = {};
	    o.name = entry.name;
	    o.type = capi.type_to_c(entry.type);
	    o.rank = (entry.dims != undefined ? entry.dims.length : 0);
	    o.desc = (entry.description != undefined ? "/* " + entry.description + " */" : "");
	    o.dims = entry.dims;
	    attr.push(o);
	});
	return attr;
    })();

    attrDeclList = (function(){
	var as = [];
	attributes.forEach(function(entry){
	    as.push(entry.type + " " + capi.dims_to_ptr(entry.rank) + entry.name + ";" + entry.desc);
	});
	return as;
    })();

    dimsDeclList = (function(){
	var ds = [];
	if (soft.model.dimensions != undefined) {
	    soft.model.dimensions.forEach(function(entry){
		ds.push("size_t " + entry.name + ";");
	    });
	}
	return ds;
    })();

    undefined;
}/* This file is autogenerated. Do not edit! */

#ifndef ENTITY_@{ENTITY}_H_DEF
#define ENTITY_@{ENTITY}_H_DEF

#include <stddef.h>

typedef struct _@{entity}_s @{entity}_s;

typedef struct 
{
  @{dimsDeclList.join("\n  ");}
} @{entity}_dimensions_s;

typedef struct 
{
  @{attrDeclList.join("\n  ");}
} @{entity}_properties_s;

@{entity}_s *@{entity}_create0(const char *id);
@{entity}_s *@{entity}_create(@{createArgs.join(",")});
void @{entity}_free(@{entity}_s *self);

@{entity}_properties_s * const @{entity}_props(@{entity}_s *self);
@{entity}_dimensions_s * const @{entity}_dims(@{entity}_s *self);

#endif /* ENTITY_@{ENTITY}_H_DEF */


