#ifndef BeetstraDrag_H
#define BeetstraDrag_H

#include "forceModel.H"
#include "interpolationCellPoint.H"
#include "multiphaseFlowBasic.H"

// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

namespace Foam
{

/*---------------------------------------------------------------------------*\
  Class BeetstraDrag Declaration
  \*---------------------------------------------------------------------------*/

   class BeetstraDrag : public forceModel
   {
   private:
      dictionary propsDict_;
      bool verbose_;
      word velFieldName_;
      const volVectorField& U_;
      word densityFieldName_;
      const volScalarField& rho_;
      word voidfractionFieldName_;
      const volScalarField& voidfraction_;
      word gravityFieldName_;
#ifdef version21
      const uniformDimensionedVectorField& g_;    // ref to gravity
#elif defined(version16ext) || defined(version15)
      const dimensionedVector& g_;    // ref to gravity
#endif
   
      mutable scalar  dPrim_; //the  primary particle diameter
      scalar  rhoParticle_;   //the (reference) particle density
      bool interpolation_; // use interpolated field values
      mutable scalar scale_;
      bool useFilteredDragModel_; //use filtered drag model or not
    
      bool useParcelSizeDependentFilteredDrag_; //take the parcel size for the filtered drag into account
    
      scalar filtDragParamsK_; 
      scalar filtDragParamsALimit_;
      scalar filtDragParamsAExponent_;
      mutable scalar filtDragParamsLChar2_;
      mutable multiphaseFlowBasic basicCalculator_; 

      //Include filtered Drag Function Declarations
#   include "./filteredDragFunctions/filteredDragFunctions.H"

   public:
      //- Runtime type information
      TypeName("BeetstraDrag");

      // Constructors

      //- Construct from components
      BeetstraDrag
      (
	 const dictionary& dict,
	 cfdemCloud& sm
	 );

      // Destructor
      ~BeetstraDrag();

      // Member Functions
      void setForce() const;        
   };

} // End namespace Foam


#endif
