// This file is autogenerated
// class: @{soft.model.name}, 
// version: @{soft.model.version}
// author: @{soft.model.author}
@{
    _ = require('utils.underscore');

    /*! argList is a string containing the ctor arguments for the
     *  sizes.
     */
    argList = function(){
	if(soft.model.dimensions === undefined) 
	    return '';
	return _.map(soft.model.dimensions, function(dim) {
	    return dim.name.toLowerCase() + '_';
	}).join(',');
    }();
    
    /*! The range function defines an initialization for an array type
     *  with a defined unit.
     */
    range = function(prop){
	var sizes = prop.dims.split(',');	
	var indent = '  ';
	var buff = "_.range(" + sizes[0].toLowerCase() + '_' + ").map(function(){\n";

	for(var i = 1; i < sizes.length; ++i) {
	    indent += '  ';
	    buff += indent + "return _.range(" + sizes[i].toLowerCase() + '_'+ ").map(function(){\n";
	    if( i == sizes.length - 1 ) {
		buff += indent + "  return new $Qty('" + prop.unit + "');\n";
	    }
	}
	for(var i = 0; i < sizes.length; ++i) {
	    buff += indent + "});\n";
	    indent = indent.slice(2);
	}
	return buff;
    };
    undefined;
}

var $Qty = require('utils.quantities');

function @{soft.model.name} (@argList) {
@if(soft.model.dimensions !== undefined) {
  this.dimensions = {
@{ _.map(soft.model.dimensions, function(dim){
  return '    ' + dim.name + ':' + dim.name.toLowerCase() + '_';
  }).join(',\n');}
  };
}

@{_.map(soft.model.properties, function(prop){
    if(prop.unit !== undefined) {
	if(prop.dims !== undefined) {
	    return '  this.' + prop.name + ' =' + range(prop);
	} else {
	    return '  this.' + prop.name + ' = new $Qty(\'' + prop.unit + '\');';
	}
    } else {
	return '  this.' + prop.name + ' = undefined';
    }
}).join(';\n');
}
};
