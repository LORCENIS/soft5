@{
function capitalize(str) {
  return str.charAt(0).toUpperCase() + str.slice(1);
};
function typeToCppType(type) {
  var typemap = {
    "integer": "int",
    "int"    : "int",
    "double" : "double",
    "string" : "std::string",
    "boolean": "bool"
  };
  return typemap[type];
}

function typeToConvType(type) {
  var typemap = {
    "integer" : "toInt",
    "string"  : "toString",
    "double"  : "toDouble"
  };
  return typemap[type];
}

CopyConstructorParams = soft.model.properties.map(function(prop){
  return prop.name + " (other." + prop.name + ")"
}).join("\n  , ");


SetFuncBody = soft.model.properties.map(function(prop){
  return "obj.insert(\"" + prop.name + "\", StorageValue(e->"+ prop.name + "));";
}).join("\n  ");

GetFuncBody = soft.model.properties.map(function(prop){
  return "e->" + prop.name + " = obj.find(\""+ prop.name +"\")." + typeToConvType(prop.type) + "();"
}).join("\n  ");

Classname = capitalize(soft.model.name);
undefined
}
/*
 * A Generated by Soft @{new Date().toString()}
 */

#include "@{soft.bag.filename}.h"
#include "storageobject.h"
#include "storagevalue.h"
#include <iostream>
#include <string>

@Classname :: @{Classname}()
{}

@Classname :: @{Classname}(@{Classname} const &other)
  : @CopyConstructorParams
{}

@Classname :: ~@{Classname}()
{}

std::string @Classname :: _version()
{
  return std::string("@{soft.model.version}");
}

std::string @Classname :: _name()
{
  return std::string("@{soft.model.name}");
}

bool @Classname :: store(StorageObject &obj)
{
   return @{Classname}Store::set(this, obj);
}

bool @Classname :: restore(StorageObject const &obj)
{
   return @{Classname}Store::get(this, obj);
}

bool @{Classname}Store :: set(const @{Classname} *e, StorageObject &obj)
{
  obj.insert("__name__", StorageValue(e->_name()));
  obj.insert("__version__", StorageValue(e->_version()));
  @SetFuncBody		    
  return true;
}

bool @{Classname}Store :: get(@{Classname} *e, StorageObject const &obj)
{
  auto name = obj.find("__name__").toString();
  auto version = obj.find("__version__").toString();
  @GetFuncBody
  return true;
}



